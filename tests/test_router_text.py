import asyncio
from types import SimpleNamespace
from unittest.mock import AsyncMock, call

import storage
from handlers import router
from models import Board, Ship


def test_router_invalid_cell_shows_board(monkeypatch):
    async def run_test():
        match = SimpleNamespace(
            status='playing',
            players={'A': SimpleNamespace(user_id=1, chat_id=10),
                     'B': SimpleNamespace(user_id=2, chat_id=20)},
            boards={'A': SimpleNamespace(), 'B': SimpleNamespace()},
            turn='A',
            shots={'A': {'history': [], 'last_result': None},
                   'B': {'history': [], 'last_result': None}},
        )
        monkeypatch.setattr(storage, 'find_match_by_user', lambda uid: match)
        monkeypatch.setattr(router, 'render_board_own', lambda b: 'own')
        monkeypatch.setattr(router, 'render_board_enemy', lambda b: 'enemy')

        send_message = AsyncMock()
        context = SimpleNamespace(bot=SimpleNamespace(send_message=send_message))
        update = SimpleNamespace(
            message=SimpleNamespace(text='63', reply_text=AsyncMock()),
            effective_user=SimpleNamespace(id=1),
        )
        await router.router_text(update, context)
        assert send_message.call_args_list == [
            call(10, '–í–∞—à–µ –ø–æ–ª–µ:\nown\n–ü–æ–ª–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:\nenemy\n–ù–µ –ø–æ–Ω—è–ª –∫–ª–µ—Ç–∫—É. –ü—Ä–∏–º–µ—Ä: –µ5 –∏–ª–∏ –¥10.', parse_mode='HTML')
        ]
    asyncio.run(run_test())


def test_router_wrong_turn_shows_board(monkeypatch):
    async def run_test():
        match = SimpleNamespace(
            status='playing',
            players={'A': SimpleNamespace(user_id=1, chat_id=10),
                     'B': SimpleNamespace(user_id=2, chat_id=20)},
            boards={'A': SimpleNamespace(), 'B': SimpleNamespace()},
            turn='B',
            shots={'A': {'history': [], 'last_result': None},
                   'B': {'history': [], 'last_result': None}},
        )
        monkeypatch.setattr(storage, 'find_match_by_user', lambda uid: match)
        monkeypatch.setattr(router, 'render_board_own', lambda b: 'own')
        monkeypatch.setattr(router, 'render_board_enemy', lambda b: 'enemy')

        send_message = AsyncMock()
        context = SimpleNamespace(bot=SimpleNamespace(send_message=send_message))
        update = SimpleNamespace(
            message=SimpleNamespace(text='a1', reply_text=AsyncMock()),
            effective_user=SimpleNamespace(id=1),
        )
        await router.router_text(update, context)
        assert send_message.call_args_list == [
            call(10, '–í–∞—à–µ –ø–æ–ª–µ:\nown\n–ü–æ–ª–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:\nenemy\n–°–µ–π—á–∞—Å —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.', parse_mode='HTML')
        ]
    asyncio.run(run_test())


def test_router_auto_shows_board(monkeypatch):
    async def run_test():
        match = SimpleNamespace(
            status='placing',
            players={'A': SimpleNamespace(user_id=1, chat_id=10, ready=False),
                     'B': SimpleNamespace(user_id=2, chat_id=20, ready=True)},
            boards={'A': SimpleNamespace(), 'B': SimpleNamespace()},
            turn='A',
        )

        def fake_save_board(m, key, board):
            m.boards[key] = board
            m.players[key].ready = True
            if all(p.ready for p in m.players.values()):
                m.status = 'playing'
                m.turn = 'A'

        monkeypatch.setattr(storage, 'save_board', fake_save_board)
        monkeypatch.setattr(storage, 'find_match_by_user', lambda uid: match)
        monkeypatch.setattr(router, 'random_board', lambda: SimpleNamespace())
        monkeypatch.setattr(router, 'render_board_own', lambda b: 'own')
        monkeypatch.setattr(router, 'render_board_enemy', lambda b: 'enemy')

        send_message = AsyncMock()
        context = SimpleNamespace(bot=SimpleNamespace(send_message=send_message))
        update = SimpleNamespace(
            message=SimpleNamespace(text='–∞–≤—Ç–æ', reply_text=AsyncMock()),
            effective_user=SimpleNamespace(id=1),
        )
        await router.router_text(update, context)
        assert send_message.call_args_list == [
            call(10, '–í–∞—à–µ –ø–æ–ª–µ:\nown\n–ü–æ–ª–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:\nenemy\n–ö–æ—Ä–∞–±–ª–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã. –ë–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í–∞—à —Ö–æ–¥.', parse_mode='HTML'),
            call(20, '–í–∞—à–µ –ø–æ–ª–µ:\nown\n–ü–æ–ª–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:\nenemy\n–°–æ–ø–µ—Ä–Ω–∏–∫ –≥–æ—Ç–æ–≤. –ë–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –•–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.', parse_mode='HTML'),
        ]
    asyncio.run(run_test())


def test_router_kill_message(monkeypatch):
    async def run_test():
        board_self = Board()
        board_enemy = Board()
        ship1 = Ship(cells=[(0, 0)])
        ship2 = Ship(cells=[(9, 9)])
        board_enemy.ships = [ship1, ship2]
        board_enemy.grid[0][0] = 1
        board_enemy.grid[9][9] = 1
        board_enemy.alive_cells = 2
        match = SimpleNamespace(
            status='playing',
            players={'A': SimpleNamespace(user_id=1, chat_id=10),
                     'B': SimpleNamespace(user_id=2, chat_id=20)},
            boards={'A': board_self, 'B': board_enemy},
            turn='A',
            shots={'A': {'history': [], 'last_result': None},
                   'B': {'history': [], 'last_result': None}},
        )
        monkeypatch.setattr(storage, 'find_match_by_user', lambda uid: match)
        monkeypatch.setattr(router, 'render_board_own', lambda b: 'own')
        monkeypatch.setattr(router, 'render_board_enemy', lambda b: 'enemy')
        monkeypatch.setattr(storage, 'save_match', lambda m: None)
        send_message = AsyncMock()
        context = SimpleNamespace(bot=SimpleNamespace(send_message=send_message))
        update = SimpleNamespace(
            message=SimpleNamespace(text='a1', reply_text=AsyncMock()),
            effective_user=SimpleNamespace(id=1),
        )
        await router.router_text(update, context)
        assert send_message.call_args_list == [
            call(10, '–í–∞—à–µ –ø–æ–ª–µ:\nown\n–ü–æ–ª–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:\nenemy\n–∞1 - –ö–æ—Ä–∞–±–ª—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω! –í–∞—à —Ö–æ–¥.', parse_mode='HTML'),
            call(20, '–í–∞—à–µ –ø–æ–ª–µ:\nown\n–ü–æ–ª–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:\nenemy\n–∞1 - –°–æ–ø–µ—Ä–Ω–∏–∫ —É–Ω–∏—á—Ç–æ–∂–∏–ª –≤–∞—à –∫–æ—Ä–∞–±–ª—å. –•–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.', parse_mode='HTML'),
        ]
    asyncio.run(run_test())


def test_router_game_over_messages(monkeypatch):
    async def run_test():
        board_self = Board()
        board_enemy = Board()
        ship1 = Ship(cells=[(0, 0)])
        board_enemy.ships = [ship1]
        board_enemy.grid[0][0] = 1
        board_enemy.alive_cells = 1
        match = SimpleNamespace(
            status='playing',
            players={'A': SimpleNamespace(user_id=1, chat_id=10),
                     'B': SimpleNamespace(user_id=2, chat_id=20)},
            boards={'A': board_self, 'B': board_enemy},
            turn='A',
            shots={'A': {'history': [], 'last_result': None},
                   'B': {'history': [], 'last_result': None}},
        )
        def fake_finish(m, winner):
            m.status = 'finished'
            return None
        monkeypatch.setattr(storage, 'find_match_by_user', lambda uid: match)
        monkeypatch.setattr(router, 'render_board_own', lambda b: 'own')
        monkeypatch.setattr(router, 'render_board_enemy', lambda b: 'enemy')
        monkeypatch.setattr(storage, 'finish', fake_finish)
        send_message = AsyncMock()
        context = SimpleNamespace(bot=SimpleNamespace(send_message=send_message))
        update = SimpleNamespace(
            message=SimpleNamespace(text='a1', reply_text=AsyncMock()),
            effective_user=SimpleNamespace(id=1),
        )
        await router.router_text(update, context)
        calls = send_message.call_args_list
        assert '–í—ã –ø–æ–±–µ–¥–∏–ª–∏. üèÜüéâ' in calls[0].args[1]
        assert '–í—Å–µ –≤–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã' in calls[1].args[1]
        assert calls[2].args[1] == '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
        assert calls[3].args[1] == '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
        assert calls[2].kwargs['reply_markup'].keyboard[0][0].text == '–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É'
        assert calls[3].kwargs['reply_markup'].keyboard[0][0].text == '–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É'
    asyncio.run(run_test())
